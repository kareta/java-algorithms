package kareta.lab3.tree;

import java.util.LinkedList;
import java.util.Queue;
import java.util.jar.Pack200;

//preorder
public class BinaryTree {

    private TreeNode root;

    public boolean addNode(int key, String name) {
        TreeNode newNode = new TreeNode(key, name);

        if (root == null) {
            root = newNode;
            return true;
        }


        TreeNode focusNode = root;
        TreeNode parent;

        while (true) {
            parent = focusNode;

            if (key < focusNode.key) {
                focusNode = focusNode.leftChild;

                if (focusNode == null) {

                    parent.leftChild = newNode;
                    return true;
                }

            } else if (key > focusNode.key) {
                focusNode = focusNode.rightChild;

                if (focusNode == null) {
                    parent.rightChild = newNode;
                    return true;
                }
            } else if (key == focusNode.key) {
                return false;
            }
        }
    }

    public void inOrderTraverseTree() {
        inOrderTraverseTree(root);
    }

    private void inOrderTraverseTree(TreeNode focusNode) {
        if (focusNode != null) {
            inOrderTraverseTree(focusNode.leftChild);
            System.out.println(focusNode);
            inOrderTraverseTree(focusNode.rightChild);
        }

    }

    public void preorderTraverseTree() {
        preorderTraverseTree(root);
    }

    private void preorderTraverseTree(TreeNode focusNode) {

        if (focusNode != null) {
            System.out.println(focusNode);
            preorderTraverseTree(focusNode.leftChild);
            preorderTraverseTree(focusNode.rightChild);
        }
    }



    public TreeNode findNode(int key) {
        TreeNode focusNode = root;

        while (focusNode.key != key) {
            if (key < focusNode.key) {
                focusNode = focusNode.leftChild;
            } else {
                focusNode = focusNode.rightChild;
            }

            if (focusNode == null) {
                return null;
            }
        }

        return focusNode;
    }

     public boolean remove(int key) {

            // Start at the top of the tree

            TreeNode focusNode = root;
            TreeNode parent = root;

            boolean isItALeftChild = true;

            while (focusNode.key != key) {

                parent = focusNode;

                if (key < focusNode.key) {
                    isItALeftChild = true;
                    focusNode = focusNode.leftChild;
                } else {
                    isItALeftChild = false;
                    focusNode = focusNode.rightChild;
                }

                if (focusNode == null) {
                    return false;
                }


            }

            if (focusNode.leftChild == null && focusNode.rightChild == null) {

                if (focusNode == root) {
                    root = null;
                } else if (isItALeftChild) {
                    parent.leftChild = null;
                } else {
                    parent.rightChild = null;
                }



            } else if (focusNode.rightChild == null) {

                if (focusNode == root) {
                    root = focusNode.leftChild;
                } else if (isItALeftChild) {
                    parent.leftChild = focusNode.leftChild;
                } else {
                    parent.rightChild = focusNode.leftChild;
                }

            } else if (focusNode.leftChild == null) {

                if (focusNode == root) {
                    root = focusNode.rightChild;
                } else if (isItALeftChild) {

                }
                    parent.leftChild = focusNode.rightChild;

                    // Vice versa for the left child

                else
                    parent.rightChild = focusNode.rightChild;

            }

            // Two children so I need to find the deleted nodes
            // replacement

            else {

                TreeNode replacement = getReplacementNode(focusNode);

                // If the focusNode is root replace root
                // with the replacement

                if (focusNode == root)
                    root = replacement;

                    // If the deleted node was a left child
                    // make the replacement the left child

                else if (isItALeftChild)
                    parent.leftChild = replacement;

                    // Vice versa if it was a right child

                else
                    parent.rightChild = replacement;

                replacement.leftChild = focusNode.leftChild;

            }

            return true;

        }

        public TreeNode getReplacementNode(TreeNode replacedNode) {

            TreeNode replacementParent = replacedNode;
            TreeNode replacement = replacedNode;

            TreeNode focusNode = replacedNode.rightChild;

            // While there are no more left children

            while (focusNode != null) {

                replacementParent = replacement;

                replacement = focusNode;

                focusNode = focusNode.leftChild;

            }

            // If the replacement isn't the right child
            // move the replacement into the parents
            // leftChild slot and move the replaced nodes
            // right child into the replacements rightChild

            if (replacement != replacedNode.rightChild) {

                replacementParent.leftChild = replacement.rightChild;
                replacement.rightChild = replacedNode.rightChild;

            }

            return replacement;

        }
}



